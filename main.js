// –ú–∞—Å–∏–≤ –ª–æ–≥—ñ–≤
const logs = [
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –≤—Å–ø–æ–º–Ω–∏–ª —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ, –Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2], –Ω–µ –ø–æ–º–Ω—è —Å–µ–±—è –æ—Ç –∏—Å–ø—É–≥–∞, —É–¥–∞—Ä–∏–ª –≤ –ø—Ä–µ–¥–ø–ª–µ—á—å–µ –≤—Ä–∞–≥–∞.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –ø–æ–ø–µ—Ä—Ö–Ω—É–ª—Å—è, –∏ –∑–∞ —ç—Ç–æ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] —Å –∏—Å–ø—É–≥—É –ø—Ä–∏–ª–æ–∂–∏–ª –ø—Ä—è–º–æ–π —É–¥–∞—Ä –∫–æ–ª–µ–Ω–æ–º –≤ –ª–æ–± –≤—Ä–∞–≥–∞.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –∑–∞–±—ã–ª—Å—è, –Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞–≥–ª—ã–π [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2], –ø—Ä–∏–Ω—è–≤ –≤–æ–ª–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω–µ—Å–ª—ã—à–Ω–æ –ø–æ–¥–æ–π–¥—è —Å–∑–∞–¥–∏, —É–¥–∞—Ä–∏–ª.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –ø—Ä–∏—à–µ–ª –≤ —Å–µ–±—è, –Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–Ω–µ—Å –º–æ—â–Ω–µ–π—à–∏–π —É–¥–∞—Ä.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –ø–æ–ø–µ—Ä—Ö–Ω—É–ª—Å—è, –Ω–æ –≤ —ç—Ç–æ –≤—Ä–µ–º—è [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] –Ω–µ—Ö–æ—Ç—è —Ä–∞–∑–¥—Ä–æ–±–∏–ª –∫—É–ª–∞–∫–æ–º <–≤—ã—Ä–µ–∑–∞–Ω–Ω–æ —Ü–µ–Ω–∑—É—Ä–æ–π> –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] —É–¥–∏–≤–∏–ª—Å—è, –∞ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] –ø–æ—à–∞—Ç–Ω—É–≤—à–∏—Å—å –≤–ª–µ–ø–∏–ª –ø–æ–¥–ª—ã–π —É–¥–∞—Ä.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –≤—ã—Å–º–æ—Ä–∫–∞–ª—Å—è, –Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] –ø—Ä–æ–≤–µ–ª –¥—Ä–æ–±—è—â–∏–π —É–¥–∞—Ä.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –ø–æ—à–∞—Ç–Ω—É–ª—Å—è, –∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –Ω–∞–≥–ª—ã–π [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] –±–µ—Å–ø—Ä–∏—á–∏–Ω–Ω–æ —É–¥–∞—Ä–∏–ª –≤ –Ω–æ–≥—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è, –∫–∞–∫ –≤–¥—Ä—É–≥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] —Å–ª—É—á–∞–π–Ω–æ –≤–ª–µ–ø–∏–ª —Å—Ç–æ–ø–æ–π –≤ –∂–∏–≤–æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.',
  '[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1] –ø—ã—Ç–∞–ª—Å—è —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–æ –≤–¥—Ä—É–≥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ [–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2] —Å–æ —Å–∫—É–∫–∏, —Ä–∞–∑–±–∏–ª –±—Ä–æ–≤—å —Å–æ–ø–µ—Ä–Ω–∏–∫—É.'
];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ª–æ–≥ —Ä—è–¥–∫–∞
function getRandomLog(firstPerson, secondPerson, damage, remainingHp) {
  const randomIndex = Math.floor(Math.random() * logs.length);
  const log = logs[randomIndex]
    .replace('[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ1]', firstPerson)
    .replace('[–ü–ï–†–°–û–ù–ê–ñ ‚Ññ2]', secondPerson);
  return `${log} üí• –ó–∞–≤–¥–∞–Ω–æ —à–∫–æ–¥–∏: ${damage}. –ó–∞–ª–∏—à–∏–ª–æ—Å—å HP: ${remainingHp}.`;
}

// –°—Ç–≤–æ—Ä—é—î–º–æ div –¥–ª—è –ª–æ–≥—ñ–≤
const $logs = document.createElement('div');
$logs.id = 'logs';
document.querySelector('.playground').after($logs);

// –ö–ª–∞—Å Pokemon
class Pokemon {
  constructor(name, selector) {
    this.name = name;
    this.maxHp = 100;
    this.hp = this.maxHp;
    this.selector = selector;
  }

  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  renderHP() {
    const healthText = document.getElementById(`health-${this.selector}`);
    const progressbar = document.getElementById(`progressbar-${this.selector}`);
    const { hp, maxHp } = this;

    healthText.textContent = `${hp} / ${maxHp}`;
    progressbar.style.width = `${(hp / maxHp) * 100}%`;

    progressbar.classList.remove('low', 'critical');
    if (hp / maxHp <= 0.2) progressbar.classList.add('critical');
    else if (hp / maxHp <= 0.5) progressbar.classList.add('low');
  }

  changeHp(damage) {
    this.hp = Math.max(this.hp - damage, 0);
    this.renderHP();
    if (this.hp === 0) {
      alert(`${this.name} –ø—Ä–æ–≥—Ä–∞–≤!`);
    }
  }

  attack(enemy, maxDamage, minDamage = 5) {
    const damage = Math.floor(Math.random() * (maxDamage - minDamage + 1)) + minDamage;

    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è —ñ–º–µ–Ω –¥–ª—è –ª–æ–≥–∞
    const { name: attackerName } = this;
    const { name: enemyName, hp: enemyHp } = enemy;

    const remainingHp = Math.max(enemyHp - damage, 0);
    const logMessage = getRandomLog(enemyName, attackerName, damage, remainingHp);

    addLog(logMessage);
    enemy.changeHp(damage);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ —É DOM (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–≤–µ—Ä—Ö—É)
function addLog(message) {
  const $p = document.createElement('p');
  $p.textContent = message;
  // –¥–æ–¥–∞—î–º–æ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–≤–µ—Ä—Ö—É)
  $logs.prepend($p);
}

// --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—ñ–≤ ---
const player1 = new Pokemon('Pikachu', 'character');
const player2 = new Pokemon('Charmander', 'enemy');

player1.renderHP();
player2.renderHP();

// --- –ö–Ω–æ–ø–∫–∏ ---
const $btnKick = document.getElementById('btn-kick');
$btnKick.addEventListener('click', () => {
  player1.attack(player2, 20, 5);
  if (player2.hp > 0) player2.attack(player1, 20, 5);
});

const $btnSpecial = document.createElement('button');
$btnSpecial.classList.add('button');
$btnSpecial.textContent = 'Special Attack';
document.querySelector('.control').appendChild($btnSpecial);

$btnSpecial.addEventListener('click', () => {
  player1.attack(player2, 40, 15);
  if (player2.hp > 0) player2.attack(player1, 20, 5);
});